//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the AviTradeOLTPData datasource.
    /// </summary>
    public sealed partial class AviTradeOLTPDataService
        : global::LightSwitchApplication.AviTradeOLTPData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AviTradeOLTPDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_Inserting(global::LightSwitchApplication.Aircraft entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_Inserted(global::LightSwitchApplication.Aircraft entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_Updating(global::LightSwitchApplication.Aircraft entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_Updated(global::LightSwitchApplication.Aircraft entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_Deleting(global::LightSwitchApplication.Aircraft entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_Deleted(global::LightSwitchApplication.Aircraft entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_Validate(global::LightSwitchApplication.Aircraft entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Aircraft_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Aircraft, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_Inserting(global::LightSwitchApplication.Airport entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_Inserted(global::LightSwitchApplication.Airport entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_Updating(global::LightSwitchApplication.Airport entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_Updated(global::LightSwitchApplication.Airport entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_Deleting(global::LightSwitchApplication.Airport entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_Deleted(global::LightSwitchApplication.Airport entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_Validate(global::LightSwitchApplication.Airport entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Airports_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Airport, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_Inserting(global::LightSwitchApplication.Contract entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_Inserted(global::LightSwitchApplication.Contract entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_Updating(global::LightSwitchApplication.Contract entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_Updated(global::LightSwitchApplication.Contract entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_Deleting(global::LightSwitchApplication.Contract entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_Deleted(global::LightSwitchApplication.Contract entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_Validate(global::LightSwitchApplication.Contract entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Contracts_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Contract, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_Inserting(global::LightSwitchApplication.CreditCard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_Inserted(global::LightSwitchApplication.CreditCard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_Updating(global::LightSwitchApplication.CreditCard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_Updated(global::LightSwitchApplication.CreditCard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_Deleting(global::LightSwitchApplication.CreditCard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_Deleted(global::LightSwitchApplication.CreditCard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_Validate(global::LightSwitchApplication.CreditCard entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreditCards_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.CreditCard, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_Inserting(global::LightSwitchApplication.Group entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_Inserted(global::LightSwitchApplication.Group entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_Updating(global::LightSwitchApplication.Group entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_Updated(global::LightSwitchApplication.Group entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_Deleting(global::LightSwitchApplication.Group entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_Deleted(global::LightSwitchApplication.Group entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_Validate(global::LightSwitchApplication.Group entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Groups_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Group, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_Inserting(global::LightSwitchApplication.Instance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_Inserted(global::LightSwitchApplication.Instance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_Updating(global::LightSwitchApplication.Instance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_Updated(global::LightSwitchApplication.Instance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_Deleting(global::LightSwitchApplication.Instance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_Deleted(global::LightSwitchApplication.Instance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_Validate(global::LightSwitchApplication.Instance entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Instances_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Instance, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_Inserting(global::LightSwitchApplication.Item entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_Inserted(global::LightSwitchApplication.Item entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_Updating(global::LightSwitchApplication.Item entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_Updated(global::LightSwitchApplication.Item entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_Deleting(global::LightSwitchApplication.Item entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_Deleted(global::LightSwitchApplication.Item entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_Validate(global::LightSwitchApplication.Item entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Items_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Item, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_Inserting(global::LightSwitchApplication.OrderLineItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_Inserted(global::LightSwitchApplication.OrderLineItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_Updating(global::LightSwitchApplication.OrderLineItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_Updated(global::LightSwitchApplication.OrderLineItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_Deleting(global::LightSwitchApplication.OrderLineItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_Deleted(global::LightSwitchApplication.OrderLineItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_Validate(global::LightSwitchApplication.OrderLineItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderLineItems_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderLineItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_Inserting(global::LightSwitchApplication.Order entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_Inserted(global::LightSwitchApplication.Order entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_Updating(global::LightSwitchApplication.Order entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_Updated(global::LightSwitchApplication.Order entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_Deleting(global::LightSwitchApplication.Order entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_Deleted(global::LightSwitchApplication.Order entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_Validate(global::LightSwitchApplication.Order entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Orders_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Order, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_Inserting(global::LightSwitchApplication.Trader entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_Inserted(global::LightSwitchApplication.Trader entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_Updating(global::LightSwitchApplication.Trader entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_Updated(global::LightSwitchApplication.Trader entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_Deleting(global::LightSwitchApplication.Trader entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_Deleted(global::LightSwitchApplication.Trader entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_Validate(global::LightSwitchApplication.Trader entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Traders_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Trader, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_Inserting(global::LightSwitchApplication.User entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_Inserted(global::LightSwitchApplication.User entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_Updating(global::LightSwitchApplication.User entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_Updated(global::LightSwitchApplication.User entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_Deleting(global::LightSwitchApplication.User entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_Deleted(global::LightSwitchApplication.User entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_Validate(global::LightSwitchApplication.User entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Users_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.User, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_Inserting(global::LightSwitchApplication.TraderRegistrationToken entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_Inserted(global::LightSwitchApplication.TraderRegistrationToken entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_Updating(global::LightSwitchApplication.TraderRegistrationToken entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_Updated(global::LightSwitchApplication.TraderRegistrationToken entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_Deleting(global::LightSwitchApplication.TraderRegistrationToken entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_Deleted(global::LightSwitchApplication.TraderRegistrationToken entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_Validate(global::LightSwitchApplication.TraderRegistrationToken entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderRegistrationTokens_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.TraderRegistrationToken, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_Inserting(global::LightSwitchApplication.UserConfigurationItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_Inserted(global::LightSwitchApplication.UserConfigurationItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_Updating(global::LightSwitchApplication.UserConfigurationItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_Updated(global::LightSwitchApplication.UserConfigurationItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_Deleting(global::LightSwitchApplication.UserConfigurationItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_Deleted(global::LightSwitchApplication.UserConfigurationItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_Validate(global::LightSwitchApplication.UserConfigurationItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserConfigurationItems_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.UserConfigurationItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserByLoginCredentials_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UserByLoginCredentials_Executing(string UserId, string Password);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserByLoginCredentials_PreprocessQuery(string UserId, string Password, ref global::System.Linq.IQueryable<global::LightSwitchApplication.User> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UserByLoginCredentials_Executed(string UserId, string Password, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.User> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UserByLoginCredentials_ExecuteFailed(string UserId, string Password, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserByLoginName_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UserByLoginName_Executing(string Login);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserByLoginName_PreprocessQuery(string Login, ref global::System.Linq.IQueryable<global::LightSwitchApplication.User> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UserByLoginName_Executed(string Login, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.User> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UserByLoginName_ExecuteFailed(string Login, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WaitingToBeQuotedOrdersByTrader_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void WaitingToBeQuotedOrdersByTrader_Executing(string TraderAccount);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WaitingToBeQuotedOrdersByTrader_PreprocessQuery(string TraderAccount, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Order> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void WaitingToBeQuotedOrdersByTrader_Executed(string TraderAccount, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Order> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void WaitingToBeQuotedOrdersByTrader_ExecuteFailed(string TraderAccount, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderByToken_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void TraderByToken_Executing(string Token);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderByToken_PreprocessQuery(string Token, ref global::System.Linq.IQueryable<global::LightSwitchApplication.TraderRegistrationToken> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void TraderByToken_Executed(string Token, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.TraderRegistrationToken> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void TraderByToken_ExecuteFailed(string Token, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderCodeByUser_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void TraderCodeByUser_Executing(global::System.Nullable<int> UserId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TraderCodeByUser_PreprocessQuery(global::System.Nullable<int> UserId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.UserConfigurationItem> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void TraderCodeByUser_Executed(global::System.Nullable<int> UserId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.UserConfigurationItem> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void TraderCodeByUser_ExecuteFailed(global::System.Nullable<int> UserId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SubmittedOrdersByTrader_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void SubmittedOrdersByTrader_Executing(string TraderAccount);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SubmittedOrdersByTrader_PreprocessQuery(string TraderAccount, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Order> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void SubmittedOrdersByTrader_Executed(string TraderAccount, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Order> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void SubmittedOrdersByTrader_ExecuteFailed(string TraderAccount, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ApprovedOrdersByTrader_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void ApprovedOrdersByTrader_Executing(string TraderAccount);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ApprovedOrdersByTrader_PreprocessQuery(string TraderAccount, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Order> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void ApprovedOrdersByTrader_Executed(string TraderAccount, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Order> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void ApprovedOrdersByTrader_ExecuteFailed(string TraderAccount, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ContractsByTrader_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void ContractsByTrader_Executing(string TraderAccount);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ContractsByTrader_PreprocessQuery(string TraderAccount, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Contract> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void ContractsByTrader_Executed(string TraderAccount, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Contract> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void ContractsByTrader_ExecuteFailed(string TraderAccount, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrdersByAdvancedSearch_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OrdersByAdvancedSearch_Executing(global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate, string BuyerName, string SellerName, global::System.Nullable<int> Status);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrdersByAdvancedSearch_PreprocessQuery(global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate, string BuyerName, string SellerName, global::System.Nullable<int> Status, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Order> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OrdersByAdvancedSearch_Executed(global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate, string BuyerName, string SellerName, global::System.Nullable<int> Status, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Order> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OrdersByAdvancedSearch_ExecuteFailed(global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate, string BuyerName, string SellerName, global::System.Nullable<int> Status, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AllTraders_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void AllTraders_Executing(string LoggedInTrader);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AllTraders_PreprocessQuery(string LoggedInTrader, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Trader> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void AllTraders_Executed(string LoggedInTrader, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Trader> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void AllTraders_ExecuteFailed(string LoggedInTrader, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executing(global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executed(global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_ExecuteFailed(global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Aircraft>
                __AircraftEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Aircraft>(
                    "Aircraft",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Aircraft_Filter);
            private static bool __Aircraft_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Aircraft_CanInsert(ref result);
                return result;
            }
            private static bool __Aircraft_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Aircraft_CanUpdate(ref result);
                return result;
            }
            private static bool __Aircraft_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Aircraft_CanDelete(ref result);
                return result;
            }
            private static bool __Aircraft_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Aircraft_CanRead(ref result);
                return result;
            }
            private static void __Aircraft_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Aircraft e)
            {
                d.Aircraft_Inserting(e);
            }
            private static void __Aircraft_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Aircraft e)
            {
                d.Aircraft_Inserted(e);
            }
            private static void __Aircraft_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Aircraft e)
            {
                d.Aircraft_Updating(e);
            }
            private static void __Aircraft_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Aircraft e)
            {
                d.Aircraft_Updated(e);
            }
            private static void __Aircraft_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Aircraft e)
            {
                d.Aircraft_Deleting(e);
            }
            private static void __Aircraft_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Aircraft e)
            {
                d.Aircraft_Deleted(e);
            }
            private static void __Aircraft_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Aircraft e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Aircraft_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Aircraft, bool>> __Aircraft_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Aircraft, bool>> filter = null;
                d.Aircraft_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Airport>
                __AirportsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Airport>(
                    "Airports",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Airports_Filter);
            private static bool __Airports_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Airports_CanInsert(ref result);
                return result;
            }
            private static bool __Airports_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Airports_CanUpdate(ref result);
                return result;
            }
            private static bool __Airports_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Airports_CanDelete(ref result);
                return result;
            }
            private static bool __Airports_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Airports_CanRead(ref result);
                return result;
            }
            private static void __Airports_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Airport e)
            {
                d.Airports_Inserting(e);
            }
            private static void __Airports_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Airport e)
            {
                d.Airports_Inserted(e);
            }
            private static void __Airports_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Airport e)
            {
                d.Airports_Updating(e);
            }
            private static void __Airports_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Airport e)
            {
                d.Airports_Updated(e);
            }
            private static void __Airports_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Airport e)
            {
                d.Airports_Deleting(e);
            }
            private static void __Airports_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Airport e)
            {
                d.Airports_Deleted(e);
            }
            private static void __Airports_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Airport e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Airports_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Airport, bool>> __Airports_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Airport, bool>> filter = null;
                d.Airports_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Contract>
                __ContractsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Contract>(
                    "Contracts",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Contracts_Filter);
            private static bool __Contracts_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Contracts_CanInsert(ref result);
                return result;
            }
            private static bool __Contracts_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Contracts_CanUpdate(ref result);
                return result;
            }
            private static bool __Contracts_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Contracts_CanDelete(ref result);
                return result;
            }
            private static bool __Contracts_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Contracts_CanRead(ref result);
                return result;
            }
            private static void __Contracts_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Contract e)
            {
                d.Contracts_Inserting(e);
            }
            private static void __Contracts_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Contract e)
            {
                d.Contracts_Inserted(e);
            }
            private static void __Contracts_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Contract e)
            {
                d.Contracts_Updating(e);
            }
            private static void __Contracts_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Contract e)
            {
                d.Contracts_Updated(e);
            }
            private static void __Contracts_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Contract e)
            {
                d.Contracts_Deleting(e);
            }
            private static void __Contracts_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Contract e)
            {
                d.Contracts_Deleted(e);
            }
            private static void __Contracts_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Contract e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Contracts_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Contract, bool>> __Contracts_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Contract, bool>> filter = null;
                d.Contracts_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.CreditCard>
                __CreditCardsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.CreditCard>(
                    "CreditCards",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__CreditCards_Filter);
            private static bool __CreditCards_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.CreditCards_CanInsert(ref result);
                return result;
            }
            private static bool __CreditCards_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.CreditCards_CanUpdate(ref result);
                return result;
            }
            private static bool __CreditCards_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.CreditCards_CanDelete(ref result);
                return result;
            }
            private static bool __CreditCards_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.CreditCards_CanRead(ref result);
                return result;
            }
            private static void __CreditCards_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.CreditCard e)
            {
                d.CreditCards_Inserting(e);
            }
            private static void __CreditCards_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.CreditCard e)
            {
                d.CreditCards_Inserted(e);
            }
            private static void __CreditCards_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.CreditCard e)
            {
                d.CreditCards_Updating(e);
            }
            private static void __CreditCards_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.CreditCard e)
            {
                d.CreditCards_Updated(e);
            }
            private static void __CreditCards_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.CreditCard e)
            {
                d.CreditCards_Deleting(e);
            }
            private static void __CreditCards_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.CreditCard e)
            {
                d.CreditCards_Deleted(e);
            }
            private static void __CreditCards_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.CreditCard e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.CreditCards_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.CreditCard, bool>> __CreditCards_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.CreditCard, bool>> filter = null;
                d.CreditCards_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Group>
                __GroupsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Group>(
                    "Groups",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Groups_Filter);
            private static bool __Groups_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Groups_CanInsert(ref result);
                return result;
            }
            private static bool __Groups_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Groups_CanUpdate(ref result);
                return result;
            }
            private static bool __Groups_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Groups_CanDelete(ref result);
                return result;
            }
            private static bool __Groups_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Groups_CanRead(ref result);
                return result;
            }
            private static void __Groups_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Group e)
            {
                d.Groups_Inserting(e);
            }
            private static void __Groups_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Group e)
            {
                d.Groups_Inserted(e);
            }
            private static void __Groups_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Group e)
            {
                d.Groups_Updating(e);
            }
            private static void __Groups_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Group e)
            {
                d.Groups_Updated(e);
            }
            private static void __Groups_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Group e)
            {
                d.Groups_Deleting(e);
            }
            private static void __Groups_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Group e)
            {
                d.Groups_Deleted(e);
            }
            private static void __Groups_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Group e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Groups_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Group, bool>> __Groups_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Group, bool>> filter = null;
                d.Groups_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Instance>
                __InstancesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Instance>(
                    "Instances",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Instances_Filter);
            private static bool __Instances_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Instances_CanInsert(ref result);
                return result;
            }
            private static bool __Instances_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Instances_CanUpdate(ref result);
                return result;
            }
            private static bool __Instances_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Instances_CanDelete(ref result);
                return result;
            }
            private static bool __Instances_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Instances_CanRead(ref result);
                return result;
            }
            private static void __Instances_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Instance e)
            {
                d.Instances_Inserting(e);
            }
            private static void __Instances_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Instance e)
            {
                d.Instances_Inserted(e);
            }
            private static void __Instances_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Instance e)
            {
                d.Instances_Updating(e);
            }
            private static void __Instances_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Instance e)
            {
                d.Instances_Updated(e);
            }
            private static void __Instances_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Instance e)
            {
                d.Instances_Deleting(e);
            }
            private static void __Instances_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Instance e)
            {
                d.Instances_Deleted(e);
            }
            private static void __Instances_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Instance e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Instances_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Instance, bool>> __Instances_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Instance, bool>> filter = null;
                d.Instances_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Item>
                __ItemsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Item>(
                    "Items",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Items_Filter);
            private static bool __Items_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Items_CanInsert(ref result);
                return result;
            }
            private static bool __Items_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Items_CanUpdate(ref result);
                return result;
            }
            private static bool __Items_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Items_CanDelete(ref result);
                return result;
            }
            private static bool __Items_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Items_CanRead(ref result);
                return result;
            }
            private static void __Items_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Item e)
            {
                d.Items_Inserting(e);
            }
            private static void __Items_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Item e)
            {
                d.Items_Inserted(e);
            }
            private static void __Items_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Item e)
            {
                d.Items_Updating(e);
            }
            private static void __Items_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Item e)
            {
                d.Items_Updated(e);
            }
            private static void __Items_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Item e)
            {
                d.Items_Deleting(e);
            }
            private static void __Items_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Item e)
            {
                d.Items_Deleted(e);
            }
            private static void __Items_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Item e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Items_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Item, bool>> __Items_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Item, bool>> filter = null;
                d.Items_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.OrderLineItem>
                __OrderLineItemsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.OrderLineItem>(
                    "OrderLineItems",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrderLineItems_Filter);
            private static bool __OrderLineItems_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.OrderLineItems_CanInsert(ref result);
                return result;
            }
            private static bool __OrderLineItems_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.OrderLineItems_CanUpdate(ref result);
                return result;
            }
            private static bool __OrderLineItems_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.OrderLineItems_CanDelete(ref result);
                return result;
            }
            private static bool __OrderLineItems_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.OrderLineItems_CanRead(ref result);
                return result;
            }
            private static void __OrderLineItems_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.OrderLineItem e)
            {
                d.OrderLineItems_Inserting(e);
            }
            private static void __OrderLineItems_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.OrderLineItem e)
            {
                d.OrderLineItems_Inserted(e);
            }
            private static void __OrderLineItems_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.OrderLineItem e)
            {
                d.OrderLineItems_Updating(e);
            }
            private static void __OrderLineItems_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.OrderLineItem e)
            {
                d.OrderLineItems_Updated(e);
            }
            private static void __OrderLineItems_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.OrderLineItem e)
            {
                d.OrderLineItems_Deleting(e);
            }
            private static void __OrderLineItems_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.OrderLineItem e)
            {
                d.OrderLineItems_Deleted(e);
            }
            private static void __OrderLineItems_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.OrderLineItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.OrderLineItems_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderLineItem, bool>> __OrderLineItems_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderLineItem, bool>> filter = null;
                d.OrderLineItems_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>
                __OrdersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>(
                    "Orders",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Orders_Filter);
            private static bool __Orders_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Orders_CanInsert(ref result);
                return result;
            }
            private static bool __Orders_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Orders_CanUpdate(ref result);
                return result;
            }
            private static bool __Orders_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Orders_CanDelete(ref result);
                return result;
            }
            private static bool __Orders_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Orders_CanRead(ref result);
                return result;
            }
            private static void __Orders_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Order e)
            {
                d.Orders_Inserting(e);
            }
            private static void __Orders_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Order e)
            {
                d.Orders_Inserted(e);
            }
            private static void __Orders_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Order e)
            {
                d.Orders_Updating(e);
            }
            private static void __Orders_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Order e)
            {
                d.Orders_Updated(e);
            }
            private static void __Orders_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Order e)
            {
                d.Orders_Deleting(e);
            }
            private static void __Orders_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Order e)
            {
                d.Orders_Deleted(e);
            }
            private static void __Orders_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Order e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Orders_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Order, bool>> __Orders_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Order, bool>> filter = null;
                d.Orders_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Trader>
                __TradersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Trader>(
                    "Traders",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Traders_Filter);
            private static bool __Traders_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Traders_CanInsert(ref result);
                return result;
            }
            private static bool __Traders_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Traders_CanUpdate(ref result);
                return result;
            }
            private static bool __Traders_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Traders_CanDelete(ref result);
                return result;
            }
            private static bool __Traders_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Traders_CanRead(ref result);
                return result;
            }
            private static void __Traders_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Trader e)
            {
                d.Traders_Inserting(e);
            }
            private static void __Traders_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Trader e)
            {
                d.Traders_Inserted(e);
            }
            private static void __Traders_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Trader e)
            {
                d.Traders_Updating(e);
            }
            private static void __Traders_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Trader e)
            {
                d.Traders_Updated(e);
            }
            private static void __Traders_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Trader e)
            {
                d.Traders_Deleting(e);
            }
            private static void __Traders_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Trader e)
            {
                d.Traders_Deleted(e);
            }
            private static void __Traders_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.Trader e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Traders_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Trader, bool>> __Traders_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Trader, bool>> filter = null;
                d.Traders_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.User>
                __UsersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.User>(
                    "Users",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Users_Filter);
            private static bool __Users_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Users_CanInsert(ref result);
                return result;
            }
            private static bool __Users_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Users_CanUpdate(ref result);
                return result;
            }
            private static bool __Users_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Users_CanDelete(ref result);
                return result;
            }
            private static bool __Users_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.Users_CanRead(ref result);
                return result;
            }
            private static void __Users_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.User e)
            {
                d.Users_Inserting(e);
            }
            private static void __Users_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.User e)
            {
                d.Users_Inserted(e);
            }
            private static void __Users_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.User e)
            {
                d.Users_Updating(e);
            }
            private static void __Users_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.User e)
            {
                d.Users_Updated(e);
            }
            private static void __Users_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.User e)
            {
                d.Users_Deleting(e);
            }
            private static void __Users_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.User e)
            {
                d.Users_Deleted(e);
            }
            private static void __Users_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.User e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Users_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.User, bool>> __Users_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.User, bool>> filter = null;
                d.Users_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.TraderRegistrationToken>
                __TraderRegistrationTokensEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.TraderRegistrationToken>(
                    "TraderRegistrationTokens",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderRegistrationTokens_Filter);
            private static bool __TraderRegistrationTokens_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.TraderRegistrationTokens_CanInsert(ref result);
                return result;
            }
            private static bool __TraderRegistrationTokens_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.TraderRegistrationTokens_CanUpdate(ref result);
                return result;
            }
            private static bool __TraderRegistrationTokens_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.TraderRegistrationTokens_CanDelete(ref result);
                return result;
            }
            private static bool __TraderRegistrationTokens_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.TraderRegistrationTokens_CanRead(ref result);
                return result;
            }
            private static void __TraderRegistrationTokens_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.TraderRegistrationToken e)
            {
                d.TraderRegistrationTokens_Inserting(e);
            }
            private static void __TraderRegistrationTokens_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.TraderRegistrationToken e)
            {
                d.TraderRegistrationTokens_Inserted(e);
            }
            private static void __TraderRegistrationTokens_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.TraderRegistrationToken e)
            {
                d.TraderRegistrationTokens_Updating(e);
            }
            private static void __TraderRegistrationTokens_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.TraderRegistrationToken e)
            {
                d.TraderRegistrationTokens_Updated(e);
            }
            private static void __TraderRegistrationTokens_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.TraderRegistrationToken e)
            {
                d.TraderRegistrationTokens_Deleting(e);
            }
            private static void __TraderRegistrationTokens_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.TraderRegistrationToken e)
            {
                d.TraderRegistrationTokens_Deleted(e);
            }
            private static void __TraderRegistrationTokens_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.TraderRegistrationToken e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.TraderRegistrationTokens_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.TraderRegistrationToken, bool>> __TraderRegistrationTokens_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.TraderRegistrationToken, bool>> filter = null;
                d.TraderRegistrationTokens_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.UserConfigurationItem>
                __UserConfigurationItemsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.UserConfigurationItem>(
                    "UserConfigurationItems",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_CanInsert,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_CanUpdate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_CanDelete,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_CanRead,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_Inserting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_Inserted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_Updating,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_Updated,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_Deleting,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_Deleted,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_Validate,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserConfigurationItems_Filter);
            private static bool __UserConfigurationItems_CanInsert(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.UserConfigurationItems_CanInsert(ref result);
                return result;
            }
            private static bool __UserConfigurationItems_CanUpdate(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.UserConfigurationItems_CanUpdate(ref result);
                return result;
            }
            private static bool __UserConfigurationItems_CanDelete(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.UserConfigurationItems_CanDelete(ref result);
                return result;
            }
            private static bool __UserConfigurationItems_CanRead(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                bool result = true;
                d.UserConfigurationItems_CanRead(ref result);
                return result;
            }
            private static void __UserConfigurationItems_Inserting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.UserConfigurationItem e)
            {
                d.UserConfigurationItems_Inserting(e);
            }
            private static void __UserConfigurationItems_Inserted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.UserConfigurationItem e)
            {
                d.UserConfigurationItems_Inserted(e);
            }
            private static void __UserConfigurationItems_Updating(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.UserConfigurationItem e)
            {
                d.UserConfigurationItems_Updating(e);
            }
            private static void __UserConfigurationItems_Updated(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.UserConfigurationItem e)
            {
                d.UserConfigurationItems_Updated(e);
            }
            private static void __UserConfigurationItems_Deleting(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.UserConfigurationItem e)
            {
                d.UserConfigurationItems_Deleting(e);
            }
            private static void __UserConfigurationItems_Deleted(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.UserConfigurationItem e)
            {
                d.UserConfigurationItems_Deleted(e);
            }
            private static void __UserConfigurationItems_Validate(global::LightSwitchApplication.AviTradeOLTPDataService d, global::LightSwitchApplication.UserConfigurationItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.UserConfigurationItems_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.UserConfigurationItem, bool>> __UserConfigurationItems_Filter(global::LightSwitchApplication.AviTradeOLTPDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.UserConfigurationItem, bool>> filter = null;
                d.UserConfigurationItems_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.User>
                __UserByLoginCredentialsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.User>(
                    "UserByLoginCredentials",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginCredentials_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginCredentials_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginCredentials_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginCredentials_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginCredentials_PreprocessQuery);
            private static bool __UserByLoginCredentials_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.UserByLoginCredentials_CanExecute(ref r);
                return r;
            }
            private static void __UserByLoginCredentials_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.UserByLoginCredentials_Executing((string)args[0], (string)args[1]);
            }
            private static void __UserByLoginCredentials_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.UserByLoginCredentials_Executed((string)args[0], (string)args[1], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.User>)args[2]);
            }
            private static void __UserByLoginCredentials_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.UserByLoginCredentials_ExecuteFailed((string)args[0], (string)args[1], ex);
            }
            private static global::System.Linq.IQueryable __UserByLoginCredentials_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.User> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.User>)args[2];
                d.UserByLoginCredentials_PreprocessQuery((string)args[0], (string)args[1], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.User>
                __UserByLoginNameEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.User>(
                    "UserByLoginName",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginName_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginName_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginName_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginName_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__UserByLoginName_PreprocessQuery);
            private static bool __UserByLoginName_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.UserByLoginName_CanExecute(ref r);
                return r;
            }
            private static void __UserByLoginName_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.UserByLoginName_Executing((string)args[0]);
            }
            private static void __UserByLoginName_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.UserByLoginName_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.User>)args[1]);
            }
            private static void __UserByLoginName_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.UserByLoginName_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __UserByLoginName_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.User> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.User>)args[1];
                d.UserByLoginName_PreprocessQuery((string)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>
                __WaitingToBeQuotedOrdersByTraderEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>(
                    "WaitingToBeQuotedOrdersByTrader",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__WaitingToBeQuotedOrdersByTrader_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__WaitingToBeQuotedOrdersByTrader_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__WaitingToBeQuotedOrdersByTrader_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__WaitingToBeQuotedOrdersByTrader_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__WaitingToBeQuotedOrdersByTrader_PreprocessQuery);
            private static bool __WaitingToBeQuotedOrdersByTrader_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.WaitingToBeQuotedOrdersByTrader_CanExecute(ref r);
                return r;
            }
            private static void __WaitingToBeQuotedOrdersByTrader_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.WaitingToBeQuotedOrdersByTrader_Executing((string)args[0]);
            }
            private static void __WaitingToBeQuotedOrdersByTrader_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.WaitingToBeQuotedOrdersByTrader_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Order>)args[1]);
            }
            private static void __WaitingToBeQuotedOrdersByTrader_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.WaitingToBeQuotedOrdersByTrader_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __WaitingToBeQuotedOrdersByTrader_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Order> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Order>)args[1];
                d.WaitingToBeQuotedOrdersByTrader_PreprocessQuery((string)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.TraderRegistrationToken>
                __TraderByTokenEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.TraderRegistrationToken>(
                    "TraderByToken",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderByToken_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderByToken_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderByToken_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderByToken_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderByToken_PreprocessQuery);
            private static bool __TraderByToken_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.TraderByToken_CanExecute(ref r);
                return r;
            }
            private static void __TraderByToken_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.TraderByToken_Executing((string)args[0]);
            }
            private static void __TraderByToken_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.TraderByToken_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.TraderRegistrationToken>)args[1]);
            }
            private static void __TraderByToken_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.TraderByToken_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __TraderByToken_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.TraderRegistrationToken> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.TraderRegistrationToken>)args[1];
                d.TraderByToken_PreprocessQuery((string)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.UserConfigurationItem>
                __TraderCodeByUserEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.UserConfigurationItem>(
                    "TraderCodeByUser",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderCodeByUser_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderCodeByUser_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderCodeByUser_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderCodeByUser_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__TraderCodeByUser_PreprocessQuery);
            private static bool __TraderCodeByUser_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.TraderCodeByUser_CanExecute(ref r);
                return r;
            }
            private static void __TraderCodeByUser_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.TraderCodeByUser_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __TraderCodeByUser_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.TraderCodeByUser_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.UserConfigurationItem>)args[1]);
            }
            private static void __TraderCodeByUser_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.TraderCodeByUser_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __TraderCodeByUser_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.UserConfigurationItem> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.UserConfigurationItem>)args[1];
                d.TraderCodeByUser_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>
                __SubmittedOrdersByTraderEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>(
                    "SubmittedOrdersByTrader",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SubmittedOrdersByTrader_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SubmittedOrdersByTrader_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SubmittedOrdersByTrader_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SubmittedOrdersByTrader_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__SubmittedOrdersByTrader_PreprocessQuery);
            private static bool __SubmittedOrdersByTrader_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.SubmittedOrdersByTrader_CanExecute(ref r);
                return r;
            }
            private static void __SubmittedOrdersByTrader_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.SubmittedOrdersByTrader_Executing((string)args[0]);
            }
            private static void __SubmittedOrdersByTrader_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.SubmittedOrdersByTrader_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Order>)args[1]);
            }
            private static void __SubmittedOrdersByTrader_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.SubmittedOrdersByTrader_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __SubmittedOrdersByTrader_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Order> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Order>)args[1];
                d.SubmittedOrdersByTrader_PreprocessQuery((string)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>
                __ApprovedOrdersByTraderEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>(
                    "ApprovedOrdersByTrader",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ApprovedOrdersByTrader_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ApprovedOrdersByTrader_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ApprovedOrdersByTrader_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ApprovedOrdersByTrader_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ApprovedOrdersByTrader_PreprocessQuery);
            private static bool __ApprovedOrdersByTrader_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.ApprovedOrdersByTrader_CanExecute(ref r);
                return r;
            }
            private static void __ApprovedOrdersByTrader_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.ApprovedOrdersByTrader_Executing((string)args[0]);
            }
            private static void __ApprovedOrdersByTrader_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.ApprovedOrdersByTrader_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Order>)args[1]);
            }
            private static void __ApprovedOrdersByTrader_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.ApprovedOrdersByTrader_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ApprovedOrdersByTrader_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Order> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Order>)args[1];
                d.ApprovedOrdersByTrader_PreprocessQuery((string)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Contract>
                __ContractsByTraderEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Contract>(
                    "ContractsByTrader",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ContractsByTrader_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ContractsByTrader_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ContractsByTrader_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ContractsByTrader_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__ContractsByTrader_PreprocessQuery);
            private static bool __ContractsByTrader_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.ContractsByTrader_CanExecute(ref r);
                return r;
            }
            private static void __ContractsByTrader_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.ContractsByTrader_Executing((string)args[0]);
            }
            private static void __ContractsByTrader_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.ContractsByTrader_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Contract>)args[1]);
            }
            private static void __ContractsByTrader_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.ContractsByTrader_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __ContractsByTrader_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Contract> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Contract>)args[1];
                d.ContractsByTrader_PreprocessQuery((string)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>
                __OrdersByAdvancedSearchEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Order>(
                    "OrdersByAdvancedSearch",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrdersByAdvancedSearch_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrdersByAdvancedSearch_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrdersByAdvancedSearch_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrdersByAdvancedSearch_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__OrdersByAdvancedSearch_PreprocessQuery);
            private static bool __OrdersByAdvancedSearch_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.OrdersByAdvancedSearch_CanExecute(ref r);
                return r;
            }
            private static void __OrdersByAdvancedSearch_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.OrdersByAdvancedSearch_Executing((global::System.Nullable<global::System.DateTime>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (global::System.Nullable<int>)args[4]);
            }
            private static void __OrdersByAdvancedSearch_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.OrdersByAdvancedSearch_Executed((global::System.Nullable<global::System.DateTime>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (global::System.Nullable<int>)args[4], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Order>)args[5]);
            }
            private static void __OrdersByAdvancedSearch_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.OrdersByAdvancedSearch_ExecuteFailed((global::System.Nullable<global::System.DateTime>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (global::System.Nullable<int>)args[4], ex);
            }
            private static global::System.Linq.IQueryable __OrdersByAdvancedSearch_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Order> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Order>)args[5];
                d.OrdersByAdvancedSearch_PreprocessQuery((global::System.Nullable<global::System.DateTime>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (global::System.Nullable<int>)args[4], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Trader>
                __AllTradersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.AviTradeOLTPDataService, global::LightSwitchApplication.Trader>(
                    "AllTraders",
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__AllTraders_CanExecute,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__AllTraders_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__AllTraders_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__AllTraders_Failed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__AllTraders_PreprocessQuery);
            private static bool __AllTraders_CanExecute(global::LightSwitchApplication.AviTradeOLTPDataService d, bool r)
            {
                d.AllTraders_CanExecute(ref r);
                return r;
            }
            private static void __AllTraders_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.AllTraders_Executing((string)args[0]);
            }
            private static void __AllTraders_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                d.AllTraders_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Trader>)args[1]);
            }
            private static void __AllTraders_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args, global::System.Exception ex)
            {
                d.AllTraders_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __AllTraders_PreprocessQuery(global::LightSwitchApplication.AviTradeOLTPDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Trader> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Trader>)args[1];
                d.AllTraders_PreprocessQuery((string)args[0], ref query);
                return query;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.AviTradeOLTPDataService>
                ___QueryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.AviTradeOLTPDataService>(
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Query_Executing,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Query_Executed,
                    global::LightSwitchApplication.AviTradeOLTPDataService.DetailsClass.__Query_Failed);
            private static void __Query_Executing(global::LightSwitchApplication.AviTradeOLTPDataService d, global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor)
            {
                d.Query_Executing(queryDescriptor);
            }
            private static void __Query_Executed(global::LightSwitchApplication.AviTradeOLTPDataService d, global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor)
            {
                d.Query_Executed(queryDescriptor);
            }
            private static void __Query_Failed(global::LightSwitchApplication.AviTradeOLTPDataService d, global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor)
            {
                d.Query_ExecuteFailed(queryDescriptor);
            }
        }
    
        #endregion
    }
    
    #endregion
}
